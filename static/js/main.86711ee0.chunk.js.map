{"version":3,"sources":["Components/Header.js","Components/AddTaskForm.js","Components/StatusBar.js","Components/Task.js","Components/Slot.js","taskData.js","App.js","index.js"],"names":["Header","className","AddTaskForm","this","props","classes","editing","error","toggleError","handleSubmit","text","updateTaskText","index","toggleEditing","root","onSubmit","e","preventDefault","input","value","currentTarget","reset","onChange","length","TextField","id","label","defaultValue","inputRef","ref","inputProps","maxLength","helperText","React","Component","withStyles","width","display","flexWrap","float","position","bottom","right","notSelected","borderRadius","background","color","new","inProgress","done","status","changeTaskStatus","Chip","onClick","size","clickable","taskSource","canDrag","monitor","newTask","isDragging","getItem","beginDrag","component","item","priority","setTimeout","toggleisAnythingDragging","endDrag","Task","state","setState","prevState","changeTaskPriority","deleteTask","connectDragSource","toggleIsAnythingDragging","Container","maxWidth","Tooltip","title","Close","close","Edit","edit","spacing","DragSource","connect","dragSource","border","height","padding","top","upArrow","downArrow","isMinimallyMoved","x","y","Math","sqrt","vectorMagnitude","slotTarget","drop","console","log","canDrop","getDifferenceFromInitialOffset","Slot","connectDropTarget","isOver","key","DropTarget","dropTarget","taskData","minPriority","maxId","reduce","acc","cur","max","App","isAnythingDragging","findTaskIndex","findIndex","obj","findTaskByPriority","priorityTasks","filter","Error","newText","taskArrayIndex","newTaskData","slotIndex","taskPriority","map","t","newState","task","prioritySortTaskData","sortedTaskData","sort","a","b","DndProvider","backend","HTML5Backend","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.86711ee0.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Header = () => {\r\n  return (\r\n    <header className= 'app-header'>\r\n      <h1>To Do List</h1>\r\n    </header>\r\n  )\r\n}\r\n\r\nexport default Header\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport TextField from '@material-ui/core/TextField'\r\nimport { withStyles } from '@material-ui/core/'\r\n\r\nconst styles = () => ({\r\n  root: {\r\n    '& .MuiTextField-root': {\r\n      width: '100%',\r\n      display: 'flex',\r\n      flexWrap: 'wrap'\r\n    }\r\n  }\r\n})\r\n\r\nclass AddTaskForm extends React.Component {\r\n  render () {\r\n    const {\r\n      classes,\r\n      editing,\r\n      error,\r\n      toggleError,\r\n      handleSubmit,\r\n      text,\r\n      updateTaskText,\r\n      index,\r\n      toggleEditing\r\n    } = this.props\r\n\r\n    const onSubmit = (e) => {\r\n      e.preventDefault()\r\n      if (text) {\r\n        updateTaskText(index, this.input.value)\r\n        toggleEditing()\r\n      } else {\r\n        handleSubmit(this.input.value)\r\n      }\r\n      e.currentTarget.reset()\r\n    }\r\n\r\n    const onChange = (e) => {\r\n      if (this.input.value.length >= 140) {\r\n        toggleError()\r\n      }\r\n    }\r\n\r\n    if (editing) {\r\n      return (\r\n        <form\r\n          className={ classes.root }\r\n          onSubmit = { onSubmit }\r\n          onChange = { onChange }>\r\n          <TextField\r\n            id = \"add-task-form\"\r\n            label = \"Add Task\"\r\n            defaultValue = { text }\r\n            inputRef={ ref => this.input = ref }\r\n            inputProps = { { maxLength: '140' } }\r\n            error = { error }\r\n            helperText = { error ? 'Tasks are limited to 140 characters' : ''}\r\n          />\r\n        </form>\r\n      )\r\n    } else {\r\n      return (null)\r\n    }\r\n  }\r\n}\r\n\r\nAddTaskForm.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n  handleSubmit: PropTypes.func,\r\n  updateTaskText: PropTypes.func,\r\n  editing: PropTypes.bool,\r\n  toggleEditing: PropTypes.func,\r\n  error: PropTypes.bool,\r\n  toggleError: PropTypes.func,\r\n  text: PropTypes.string,\r\n  index: PropTypes.number\r\n}\r\n\r\nexport default withStyles(styles)(AddTaskForm)\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { withStyles } from '@material-ui/core/styles'\r\nimport Chip from '@material-ui/core/Chip'\r\n\r\nconst styles = {\r\n  root: {\r\n    float: 'right',\r\n    position: 'absolute',\r\n    bottom: '5px',\r\n    right: '5px'\r\n  },\r\n  notSelected: {\r\n    borderRadius: 3,\r\n    'margin-left': '5px',\r\n    background: 'DarkGray',\r\n    color: 'white',\r\n    'font-weight': 'bold'\r\n  },\r\n  new: {\r\n    background: 'YellowGreen'\r\n  },\r\n  inProgress: {\r\n    background: 'Gold'\r\n  },\r\n  done: {\r\n    background: 'LightCoral'\r\n  }\r\n}\r\n\r\nconst StatusBar = (props) => {\r\n  const { classes, editing, status, index, changeTaskStatus } = props\r\n\r\n  if (!editing) {\r\n    return (\r\n      <div className = {classes.root}>\r\n        <Chip\r\n          onClick= {() => changeTaskStatus(index, 'done')}\r\n          className={ status === 'done' ? `${classes.notSelected} ${classes.done} done` : `${classes.notSelected}` }\r\n          size=\"small\"\r\n          label=\"Done\"\r\n          clickable = {false}\r\n        />\r\n        <Chip\r\n          onClick= {() => changeTaskStatus(index, 'inProgress')}\r\n          className={ status === 'inProgress' ? `${classes.notSelected} ${classes.inProgress}` : `${classes.notSelected}` }\r\n          size=\"small\"\r\n          label=\"In Progress\"\r\n          clickable = {false}\r\n        />\r\n        <Chip\r\n          onClick= {() => changeTaskStatus(index, 'new')}\r\n          className={ status === 'new' ? `${classes.notSelected} ${classes.new}` : `${classes.notSelected}`}\r\n          size=\"small\"\r\n          label=\"New\"\r\n          clickable = {false}\r\n        />\r\n      </div>\r\n    )\r\n  } else {\r\n    return (null)\r\n  }\r\n}\r\n\r\nStatusBar.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n  handleSubmit: PropTypes.func,\r\n  addTask: PropTypes.bool,\r\n  status: PropTypes.string,\r\n  index: PropTypes.number\r\n}\r\n\r\nexport default withStyles(styles)(StatusBar)\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { withStyles } from '@material-ui/core/styles'\r\nimport Container from '@material-ui/core/Container'\r\nimport { Close, Edit} from '@material-ui/icons'\r\nimport { DragSource } from 'react-dnd'\r\nimport Tooltip from '@material-ui/core/Tooltip'\r\nimport AddTaskForm from './AddTaskForm'\r\nimport StatusBar from './StatusBar'\r\n\r\nconst styles = {\r\n  root: {\r\n    background: '#dcd6f7',\r\n    border: 0,\r\n    borderRadius: 3,\r\n    //boxShadow: '0 3px 5px 2px #a6b1e1',\r\n    color: '#424874',\r\n    height: 72,\r\n    padding: '0 30px',\r\n    'text-align': 'left',\r\n    position: 'relative'\r\n  },\r\n  spacing: {\r\n    height:'5px'\r\n  },\r\n  close: {\r\n    position: 'absolute',\r\n    right: '5px',\r\n    top: '5px'\r\n  },\r\n  done: {\r\n    'text-decoration': 'line-through'\r\n  },\r\n  edit: {\r\n    color: '#a6b1e1',\r\n    'padding-inline-start': '10px'\r\n  },\r\n  upArrow: {\r\n    color: '#a6b1e1',\r\n    'padding-inline-start': '10px'\r\n  },\r\n  downArrow: {\r\n    color: '#a6b1e1',\r\n    'padding-inline-start': '10px'\r\n  }\r\n}\r\n\r\nconst Types = {\r\n  TASK: 'task'\r\n}\r\n\r\n\r\nconst taskSource = {\r\n\r\n  canDrag(props, monitor) {\r\n    return !props.newTask\r\n  },\r\n\r\n  isDragging(props, monitor) {\r\n    // If your component gets unmounted while dragged\r\n    // (like a card in Kanban board dragged between lists)\r\n    // you can implement something like this to keep its\r\n    // appearance dragged:\r\n    return monitor.getItem().index === props.index\r\n    //return monitor.getItem()\r\n  },\r\n  beginDrag(props, monitor, component) {\r\n    // Return the data describing the dragged item\r\n    const item = { \r\n      index: props.index,\r\n      priority: props.priority \r\n    }\r\n    //workaround for this bug: https://github.com/react-dnd/react-dnd/issues/477\r\n    setTimeout( () => {props.toggleisAnythingDragging(item.index)}, 10)\r\n\r\n   return item\r\n  },\r\n  endDrag(props, monitor, component){\r\n    const item = {index: props.index, priority: props.priority}\r\n    props.toggleisAnythingDragging(-1)\r\n  }\r\n}\r\n\r\nfunction collect(connect, monitor) {\r\n  return {\r\n    // Call this function inside render()\r\n    // to let React DnD handle the drag events:\r\n    connectDragSource: connect.dragSource(),\r\n    // You can ask the monitor about the current drag state:\r\n    isDragging: monitor.isDragging()\r\n  }\r\n}\r\n\r\nclass Task extends React.Component {\r\n\r\n  state = {\r\n    editing: false,\r\n    error: false\r\n  }\r\n\r\n  toggleEditing = () => {\r\n    this.setState ( prevState => {\r\n      return {\r\n        editing: !prevState.editing\r\n      }\r\n    })\r\n  }\r\n\r\n  toggleError = () => {\r\n    this.setState ( prevState => {\r\n      return {\r\n        error: !prevState.error\r\n      }\r\n    })\r\n  }\r\n\r\n  componentWillMount() {\r\n    if (this.props.newTask){\r\n      this.toggleEditing()\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      classes,\r\n      text,\r\n      status,\r\n      index,\r\n      priority,\r\n      handleSubmit,\r\n      changeTaskStatus,\r\n      changeTaskPriority,\r\n      updateTaskText,\r\n      newTask,\r\n      deleteTask,\r\n      isDragging,\r\n      beginDrag,\r\n      endDrag,\r\n      connectDragSource,\r\n      toggleIsAnythingDragging\r\n    } = this.props\r\n\r\n        \r\n    return connectDragSource(\r\n      <div>  \r\n        <Container\r\n          className={ status === 'done' ? `${classes.root} ${classes.done}` : classes.root }\r\n          maxWidth= 'sm'\r\n        >\r\n          {newTask ? null : <Tooltip title = \"Delete Task\"><Close className = {classes.close} onClick = {() => deleteTask(index)}/></Tooltip>}\r\n          {this.state.editing ? null : text}\r\n          {this.state.editing ? null : <Tooltip title = \"Edit\"><Edit className = {classes.edit} onClick = {() => this.toggleEditing()}/></Tooltip> }\r\n          <AddTaskForm \r\n            editing={this.state.editing} \r\n            toggleEditing = {this.toggleEditing}\r\n            error={this.state.error}\r\n            toggleError={this.toggleError}\r\n            handleSubmit = {handleSubmit}\r\n            updateTaskText = {updateTaskText}\r\n            index = {index}\r\n            text = {text}></AddTaskForm>\r\n          <StatusBar editing= {this.state.editing} status= {status} index = {index} changeTaskStatus = {changeTaskStatus} />\r\n        </Container>\r\n        <div className = {`${classes.spacing}`}></div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nTask.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n  text: PropTypes.string,\r\n  addTask: PropTypes.bool,\r\n  status: PropTypes.string,\r\n  handleSubmit: PropTypes.func,\r\n  index: PropTypes.number,\r\n  priority: PropTypes.number,\r\n  changeTaskStatus: PropTypes.func,\r\n  changeTaskPriority: PropTypes.func,\r\n  updateTaskText: PropTypes.func,\r\n  deleteTask: PropTypes.func,\r\n  toggleIsAnythingDragging: PropTypes.func\r\n}\r\n\r\n//export default withStyles(styles)(Task)\r\n//this explains how to export with multiple higher level components\r\nexport default  (DragSource(Types.TASK, taskSource, collect)(withStyles(styles)(Task)))\r\n\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { DropTarget } from 'react-dnd'\r\nimport { withStyles } from '@material-ui/core/styles'\r\nimport Container from '@material-ui/core/Container'\r\n\r\nconst styles = {\r\n  root: {\r\n    background: '#ddd9f0',\r\n    border: 0,\r\n    borderRadius: 3,\r\n    height: '8px',\r\n    padding: '0 30px',\r\n    'text-align': 'left',\r\n    position: 'relative'\r\n  },\r\n  isOver: {\r\n    background: '#424874',\r\n    border: 0,\r\n    borderRadius: 3,\r\n    height: '8px',\r\n    padding: '0 30px',\r\n    'text-align': 'left',\r\n    position: 'relative'\r\n  },\r\n  spacing :{\r\n    height: '5px'\r\n  }\r\n}\r\n\r\nconst Types = {\r\n  TASK: 'task'\r\n}\r\n\r\n  //trying to use this to solve my some tasks don't drag problem: https://github.com/react-dnd/react-dnd/issues/766\r\n //not sure if using canDrop will help, though, since I don't really need this function in the first place. \r\nconst MIN_MOVEMENT = 15\r\nconst vectorMagnitude = (x, y) => Math.sqrt(x ** 2 + y ** 2)\r\nconst isMinimallyMoved = ({ x, y }) => vectorMagnitude(x, y) > MIN_MOVEMENT\r\n\r\nconst slotTarget = {\r\n  drop (props, monitor, component) {\r\n    const item = monitor.getItem()\r\n    console.log('index of slot ' + props.index)\r\n    props.changeTaskPriority(item.index, props.index - item.priority, props.index)\r\n  },\r\n  canDrop (props, monitor) {\r\n    const minimallyMoved = isMinimallyMoved((monitor.getDifferenceFromInitialOffset()))\r\n    return minimallyMoved\r\n  }\r\n}\r\n\r\nfunction collect (connect, monitor) {\r\n  return {\r\n    connectDropTarget: connect.dropTarget(),\r\n    isOver: monitor.isOver()\r\n  }\r\n}\r\n\r\nclass Slot extends React.Component {\r\n  render () {\r\n    const { classes, connectDropTarget, isOver, index, changeTaskPriority, key } = this.props\r\n\r\n    return connectDropTarget(\r\n      <div>\r\n        <Container\r\n          className = {isOver ? `${classes.isOver}`:`${classes.root}`}\r\n          maxWidth = 'sm'>\r\n        </Container>\r\n        <div\r\n          className = {`${classes.spacing}`}></div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nSlot.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n  index: PropTypes.number,\r\n  changeTaskPriority: PropTypes.func\r\n\r\n}\r\n\r\nexport default (DropTarget(Types.TASK, slotTarget, collect)(withStyles(styles)(Slot)))\r\n","const taskData = [\r\n  {\r\n    text: 'Pick up 1 gallon milk.',\r\n    priority: 1,\r\n    status: 'new',\r\n    index: 100\r\n  },\r\n  {\r\n    text: 'Schedule dentist appointments for next month.',\r\n    priority: 2,\r\n    status: 'inProgress',\r\n    index: 200\r\n  },\r\n  {\r\n    text: 'Call Aunt Hilda.',\r\n    priority: 3,\r\n    status: 'new',\r\n    index: 300\r\n  },\r\n  {\r\n    text: 'Fix broken cabinet.',\r\n    priority: 4,\r\n    status: 'done',\r\n    index: 400\r\n  },\r\n  {\r\n    text: 'Follow up with electrician.',\r\n    priority: 5,\r\n    status: 'done',\r\n    index: 500\r\n  },\r\n  {\r\n    text: 'Return library books.',\r\n    priority: 6,\r\n    status: 'new',\r\n    index: 600\r\n  },\r\n  {\r\n    text: 'Install shelves.',\r\n    priority: 7,\r\n    status: 'new',\r\n    index: 700\r\n  }\r\n]\r\n\r\nconst minPriority = (taskData) => taskData.length\r\nconst maxId = (taskData) => taskData.reduce((acc, cur) => Math.max(acc, cur.index), 0)\r\n\r\nconst newTask = (taskData, text) => {\r\n  const task = {\r\n    text: text,\r\n    priority: minPriority(taskData) + 1,\r\n    status: 'new',\r\n    index: maxId(taskData) + 1\r\n  }\r\n  return task\r\n}\r\n\r\nexport { taskData, newTask, maxId }\r\n","import React from 'react'\r\nimport './App.css'\r\nimport Header from './Components/Header'\r\nimport Task from './Components/Task'\r\nimport Slot from './Components/Slot'\r\nimport { taskData, newTask } from './taskData'\r\nimport { DndProvider } from 'react-dnd'\r\nimport { HTML5Backend } from 'react-dnd-html5-backend'\r\n\r\n\r\nclass App extends React.Component {\r\n\r\n  state = {\r\n    taskData: taskData,\r\n    isAnythingDragging: false\r\n  };\r\n\r\n  handleSubmit = (text) => {\r\n    this.setState( prevState => {\r\n      return {\r\n        taskData: [\r\n          ...prevState.taskData,\r\n          newTask(prevState.taskData, text)\r\n        ]\r\n      }\r\n    })\r\n  }\r\n\r\n  \r\n  findTaskIndex = (prevState, index) => {\r\n    return prevState.taskData.findIndex(obj => obj.index === index);\r\n\r\n  }\r\n  \r\n  findTaskByPriority = (prevState, priority) => {\r\n    const priorityTasks =  prevState.taskData.filter(obj => obj.priority === priority);\r\n     if (priorityTasks.length > 1) {\r\n       throw new Error('Two items have the same priority')\r\n     }\r\n     else {\r\n       return priorityTasks[0]\r\n     }\r\n\r\n  } \r\n\r\n  updateTaskText = (index, newText) =>{\r\n    this.setState ( prevState => {\r\n      const taskArrayIndex = this.findTaskIndex(prevState, index)\r\n      let newTaskData = prevState.taskData\r\n      newTaskData[taskArrayIndex].text = newText\r\n\r\n      return {\r\n        taskData: newTaskData\r\n      }\r\n    })\r\n  }\r\n\r\n\r\n    changeTaskPriority = (index, slotIndex) => {\r\n    this.setState ( prevState => {\r\n      //establish basic info about the task you want to move\r\n      const taskArrayIndex = this.findTaskIndex(prevState, index)\r\n      const taskPriority = prevState.taskData[taskArrayIndex].priority\r\n\r\n      //create clone of prevState,which will be used to assign new state.\r\n      let newTaskData = prevState.taskData\r\n      \r\n\r\n      if (slotIndex == 1) {\r\n        \r\n        newTaskData.map( t => t.priority < newTaskData[taskArrayIndex].priority ? t.priority = t.priority +1 : null)\r\n        newTaskData[taskArrayIndex].priority = 1\r\n      \r\n      }\r\n      else if (slotIndex == newTaskData.length+1) {\r\n      \r\n        newTaskData.map( t => t.priority > newTaskData[taskArrayIndex].priority ? t.priority = t.priority - 1 : null)\r\n        newTaskData[taskArrayIndex].priority = newTaskData.length\r\n      \r\n      }\r\n      else if (slotIndex <= taskPriority) {\r\n\r\n        newTaskData.map( t => t.priority < newTaskData[taskArrayIndex].priority && t.priority >= slotIndex ? t.priority = t.priority + 1 : null)\r\n        newTaskData[taskArrayIndex].priority = slotIndex\r\n      \r\n      }\r\n      else if (slotIndex > taskPriority) {\r\n\r\n        newTaskData.map( t => t.priority > newTaskData[taskArrayIndex].priority && t.priority < slotIndex ? t.priority = t.priority - 1 : null)\r\n        newTaskData[taskArrayIndex].priority = slotIndex-1\r\n      \r\n      }\r\n      \r\n      return {\r\n        taskData: newTaskData\r\n      }\r\n    })\r\n  }\r\n  \r\n\r\n  toggleisAnythingDragging = (index) => {\r\n\r\n    this.setState ( prevState => {\r\n      return {\r\n        isAnythingDragging: index\r\n      }\r\n    })\r\n  }\r\n\r\n  changeTaskStatus = (index, newState) => {\r\n    this.setState ( prevState => {\r\n      const taskArrayIndex = this.findTaskIndex(prevState, index)\r\n      let newTaskData = prevState.taskData\r\n      newTaskData[taskArrayIndex].status = newState\r\n\r\n      return {\r\n        taskData: newTaskData\r\n      }\r\n    })\r\n  }\r\n\r\n  deleteTask = (index) => {  \r\n    this.setState ( prevState => {\r\n      let newTaskData = prevState.taskData\r\n      const taskArrayIndex = this.findTaskIndex(prevState, index)\r\n\r\n      //update priority\r\n      newTaskData.map(t => t.priority > prevState.taskData[taskArrayIndex].priority ? t.priority = t.priority - 1 : null)\r\n\r\n      //delete task\r\n      newTaskData = newTaskData.filter( (task) => task.index !== index )\r\n      \r\n      return {\r\n          taskData: newTaskData\r\n        }\r\n    })\r\n  }\r\n\r\n  prioritySortTaskData = (taskData) =>{\r\n    const sortedTaskData = [...taskData]\r\n    sortedTaskData.sort((a,b) => a.priority - b.priority)\r\n    return sortedTaskData\r\n  }\r\n\r\n   render () {\r\n    return (\r\n      <DndProvider backend={HTML5Backend}>\r\n      <div className='App'>\r\n        <Header />\r\n        {this.state.isAnythingDragging>1 ? <Slot index = {1} key = {1} changeTaskPriority = {this.changeTaskPriority}></Slot> : null}\r\n        {//sort task data in priority order before rendering.\r\n         this.prioritySortTaskData(this.state.taskData).map((task) => {\r\n          return (\r\n            <div>\r\n            <Task\r\n              text = {task.text}\r\n              key = {task.index}\r\n              status = {task.status}\r\n              index = {task.index}\r\n              priority = {task.priority}\r\n              changeTaskStatus = {this.changeTaskStatus}\r\n              changeTaskPriority = {this.changeTaskPriority}\r\n              deleteTask = {this.deleteTask}\r\n              newTask = {false}\r\n              updateTaskText = {this.updateTaskText}\r\n              toggleisAnythingDragging = {this.toggleisAnythingDragging}\r\n            />\r\n            {this.state.isAnythingDragging>0 //&& task.index != this.state.isAnythingDragging && task.index != this.state.isAnythingDragging -1 \r\n            ? <Slot \r\n                key = {task.priority + 1} \r\n                index = {task.priority + 1} \r\n                changeTaskPriority = {this.changeTaskPriority}>\r\n              </Slot> \r\n            : null}\r\n            </div>\r\n            )\r\n            \r\n        })}\r\n        <Task\r\n          key = {'add-task'}\r\n          newTask = {true}\r\n          handleSubmit = {this.handleSubmit}\r\n           />\r\n      </div>\r\n      </DndProvider>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root')\r\n)\r\n"],"sourceRoot":""}